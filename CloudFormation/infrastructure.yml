Parameters:
    EnvironmentName:
        Description: Name of the environment
        Type: String
        Default: uc-capstone

    VPCCIDR:
        Description: VPC CIDR
        Type: String
        Default: 10.0.0.0/16

    Subnet1CIDR:
        Description: Subnet 1 CIDR
        Type: String
        Default: 10.0.1.0/24

    Subnet2CIDR:
        Description: Subnet 2 CIDR
        Type: String
        Default: 10.0.2.0/24

    WorkerInstanceType:
        Description: EC2 instance type for the worker node instances.
        Type: String
        Default: t2.small

    JenkingInstanceType:
        Description: EC2 instance type for the jenkins instance.
        Type: String
        Default: t2.micro

    KeyName:
        Description: EC2 KayPair Name
        Type: String
        Default: uc-capstone-keyname

    SSHLocation:
        Description: IP Address of Jenkins Administator machine
        Type: String

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock:  !Ref VPCCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
            -   Key: Name
                Value: !Sub '${EnvironmentName}-VPC'

    InternetGateway:
        Type: "AWS::EC2::InternetGateway"

    VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            -   Key: Name
                Value: Public Subnets
            -   Key: Network
                Value: Public

    Route:
        DependsOn: VPCGatewayAttachment
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    Subnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Ref Subnet1CIDR
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            Tags:
            -   Key: Name
                Value: !Sub "${EnvironmentName}-Subnet1"

    Subnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Ref Subnet2CIDR
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            Tags:
            -   Key: Name
                Value: !Sub "${EnvironmentName}-Subnet2"

    Subnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref Subnet1
            RouteTableId: !Ref RouteTable

    Subnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref Subnet2
            RouteTableId: !Ref RouteTable

    SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Cluster security group
            VpcId: !Ref VPC

    ClusterRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: "Allow"
                    Principal:
                        Service:
                        -   "eks.amazonaws.com" 
                    Action: 
                    -   "sts:AssumeRole"
            Tags:
            -   Key: Name
                Value: !Sub "${EnvironmentName}-Role"
            Path: "/"
            ManagedPolicyArns: [
                "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
                "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
            ]

    WorkerRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        -   ec2.amazonaws.com
                    Action:
                    -   "sts:AssumeRole"
            ManagedPolicyArns:
            -   "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
            -   "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
            -   "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

    CapCluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Sub '${EnvironmentName}-cluster'
            Version: '1.14'
            RoleArn: !GetAtt ClusterRole.Arn
            ResourcesVpcConfig:
                SecurityGroupIds:
                -   !Ref SecurityGroup
                SubnetIds:
                -   !Ref Subnet1
                -   !Ref Subnet2

    NodeGroup:
        Type: 'AWS::EKS::Nodegroup'
        DependsOn: CapCluster
        Properties:
            ClusterName: !Sub '${EnvironmentName}-cluster'
            NodeRole: !GetAtt WorkerRole.Arn
            InstanceTypes:
            -   !Ref WorkerInstanceType
            RemoteAccess:
                Ec2SshKey: !Ref KeyName
            Subnets:
            -   !Ref Subnet1
            -   !Ref Subnet2
            ScalingConfig:
                DesiredSize: 1
                MinSize: 1
                MaxSize: 1
